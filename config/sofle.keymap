/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Remap the CS for nice!view

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

// Fix encoder event generation

&left_encoder {
    resolution = <4>;
    steps = <40>;
};

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky key quick release";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        slq: sticky_layer_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky layer quick release";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        tdls: tap_dance_left_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "LShift / Capsword";
            #binding-cells = <0>;
            bindings = <&skq LSHIFT>, <&caps_word>;
        };

        tdrs: tap_dance_right_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "RShift / Capsword";
            #binding-cells = <0>;
            bindings = <&skq RSHIFT>, <&caps_word>;
        };

        tdrb: tap_dance_rboot {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap dance right bootloader";
            #binding-cells = <0>;
            bindings = <&out OUT_TOG>, <&bootloader>;
        };

        tdlb: tap_dance_lboot {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap dance left bootloader";
            #binding-cells = <0>;
            bindings = <&bt BT_CLR>, <&bootloader>;
        };

        blbr: backlight_brightness {
            compatible = "zmk,behavior-sensor-rotate";
            label = "Backlight brightness";
            #sensor-binding-cells = <0>;
            bindings = <&bl BL_INC>, <&bl BL_DEC>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_F1 {
            bindings = <&kp F1>;
            key-positions = <1 13>;
            layers = <0>;
        };

        combo_F2 {
            bindings = <&kp F2>;
            key-positions = <2 14>;
            layers = <0>;
        };

        combo_F3 {
            bindings = <&kp F3>;
            key-positions = <3 15>;
            layers = <0>;
        };

        combo_F4 {
            bindings = <&kp F4>;
            key-positions = <16 4>;
            layers = <0>;
        };

        combo_F5 {
            bindings = <&kp F5>;
            key-positions = <17 5>;
            layers = <0>;
        };

        combo_F6 {
            bindings = <&kp F6>;
            key-positions = <18 6>;
            layers = <0>;
        };

        combo_F7 {
            bindings = <&kp F7>;
            key-positions = <19 7>;
            layers = <0>;
        };

        combo_F8 {
            bindings = <&kp F8>;
            key-positions = <8 20>;
            layers = <0>;
        };

        combo_F9 {
            bindings = <&kp F9>;
            key-positions = <21 9>;
            layers = <0>;
        };

        combo_F10 {
            bindings = <&kp F10>;
            key-positions = <22 10>;
            layers = <0>;
        };

        combo_F11 {
            bindings = <&kp F11>;
            key-positions = <23 11>;
            layers = <0>;
        };

        combo_F12 {
            bindings = <&kp F12>;
            key-positions = <23 35>;
            layers = <0>;
        };

        combo_EXCL {
            bindings = <&kp EXCL>;
            key-positions = <13 25>;
            layers = <0>;
        };

        combo_AT {
            bindings = <&kp AT>;
            key-positions = <26 14>;
            layers = <0>;
        };

        combo_HASH {
            bindings = <&kp HASH>;
            key-positions = <27 15>;
            layers = <0>;
        };

        combo_DLLR {
            bindings = <&kp DLLR>;
            key-positions = <28 16>;
            layers = <0>;
        };

        combo_PRCNT {
            bindings = <&kp PRCNT>;
            key-positions = <29 17>;
            layers = <0>;
        };

        combo_CARET {
            bindings = <&kp CARET>;
            key-positions = <30 18>;
            layers = <0>;
        };

        combo_AMPS {
            bindings = <&kp AMPS>;
            key-positions = <31 19>;
            layers = <0>;
        };

        combo_ASTRK {
            bindings = <&kp ASTRK>;
            key-positions = <32 20>;
            layers = <0>;
        };

        combo_LPAR {
            bindings = <&kp LPAR>;
            key-positions = <33 21>;
            layers = <0>;
        };

        combo_RPAR {
            bindings = <&kp RPAR>;
            key-positions = <34 22>;
            layers = <0>;
        };

        combo_EQUAL {
            bindings = <&kp EQUAL>;
            key-positions = <25 37>;
            layers = <0>;
        };

        combo_MINUS {
            bindings = <&kp MINUS>;
            key-positions = <26 38>;
            layers = <0>;
        };

        combo_PLUS {
            bindings = <&kp PLUS>;
            key-positions = <27 39>;
            layers = <0>;
        };

        combo_BSLH {
            bindings = <&kp BSLH>;
            key-positions = <28 40>;
            layers = <0>;
        };

        combo_TILDE {
            bindings = <&kp TILDE>;
            key-positions = <29 41>;
            layers = <0>;
        };

        combo_UNDER {
            bindings = <&kp UNDER>;
            key-positions = <30 44>;
            layers = <0>;
        };

        combo_PIPE {
            bindings = <&kp PIPE>;
            key-positions = <45 31>;
            layers = <0>;
        };

        combo_SLASH {
            bindings = <&kp SLASH>;
            key-positions = <32 46>;
            layers = <0>;
        };

        combo_LT {
            bindings = <&kp LT>;
            key-positions = <33 47>;
            layers = <0>;
        };

        combo_GT {
            bindings = <&kp GT>;
            key-positions = <34 48>;
            layers = <0>;
        };

        combo_LPAR2 {
            bindings = <&kp LPAR>;
            key-positions = <28 29>;
            layers = <0>;
        };

        combo_RPAR2 {
            bindings = <&kp RPAR>;
            key-positions = <30 31>;
            layers = <0>;
        };

        combo_LBRC {
            bindings = <&kp LBRC>;
            key-positions = <16 17>;
            layers = <0>;
        };

        combo_RBRC {
            bindings = <&kp RBRC>;
            key-positions = <18 19>;
            layers = <0>;
        };

        combo_LBKT {
            bindings = <&kp LBKT>;
            key-positions = <40 41>;
            layers = <0>;
        };

        combo_RBKT {
            bindings = <&kp RBKT>;
            key-positions = <44 45>;
            layers = <0>;
        };

        combo_DEL {
            bindings = <&kp DEL>;
            key-positions = <22 23>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp GRAVE  &kp N1  &kp N2    &kp N3    &kp N4     &kp N5                            &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &none
&kp ESC    &kp Q   &kp W     &kp E     &kp R      &kp T                             &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BSPC
&kp TAB    &kp A   &kp S     &kp D     &kp F      &kp G                             &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&tdls      &kp Z   &kp X     &kp C     &kp V      &kp B   &kp C_MUTE    &bl BL_TOG  &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &tdrs
                   &kp LGUI  &kp LALT  &kp LCTRL  &slq 1  &kp SPACE     &kp ENTER   &slq 1  &kp RCTRL  &kp RALT   &kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_DN PG_UP>;
        };

        adjust_layer {
            display-name = "Adjust";
            bindings = <
&tdlb            &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                       &none       &none          &none        &none       &none  &tdrb
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                    &none       &kp PAGE_DOWN  &kp PAGE_UP  &none       &none  &none
&none            &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &rgb_ug RGB_SPI  &none                              &kp LEFT    &kp DOWN       &kp UP       &kp RIGHT   &none  &none
&none            &none            &none            &none            &none            &none            &trans    &trans  &kp K_PREV  &kp K_PP       &none        &kp K_NEXT  &none  &none
                                  &trans           &trans           &trans           &tog 1           &trans    &trans  &tog 1      &trans         &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>, <&blbr>;
        };
    };
};
